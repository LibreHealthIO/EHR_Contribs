1c1
< function ServicePlanNewViewModel() {
---
> function NoteNewViewModel() {
3c3
< 
---
>   
8c8
< 		AssessmentId: ''
---
> 		NoteId: ''
10a11,12
> 	this.User = ko.observable();
> 
20a23
>     alert(message);
23,86c26,158
< 	this.ServicePlan = {
< 		CaseManagerId: ko.observable(),
< 		CaseManagerName: ko.observable(),
< 		CaseManagerSupervisorId: ko.observable(),
< 		CaseManagerSupervisorName: ko.observable(),
< 		ClientId: ko.observable(),
< 		ClientName: ko.observable(),
< 		ClientBirth: ko.observable(),
< 		MedicaidId: ko.observable(),
< 		Type: ko.observable(),
< 		Assessment: ko.observable(),
< 		ServicePlan: ko.observable()
< 	};
< 	this.ServicePlan.Type.subscribe(function() {
< 		self.ServicePlan.Assessment(undefined);
< 		self.ServicePlan.ServicePlan(undefined);
< 	});
< 
< 	this.ServicePlanCreate = function(data) {
< 		servicePlan = self.ServicePlan;
< 		servicePlan.CaseManagerId(data.CaseManagerId);
< 		servicePlan.CaseManagerName(data.CaseManagerName);
< 		servicePlan.CaseManagerSupervisorId(data.CaseManagerSupervisorId);
< 		servicePlan.CaseManagerSupervisorName(data.CaseManagerSupervisorName);
< 		servicePlan.ClientId(data.ClientId);
< 		servicePlan.ClientName(data.ClientName);
< 		servicePlan.ClientBirth(data.ClientBirth);
< 		servicePlan.MedicaidId(data.MedicaidId);
< 	};
< 
< 	this.ServicePlans = ko.observableArray();
< 	this.ServicePlanAdd = function(data) {
< 		servicePlan = new ParentServicePlan();
< 		servicePlan.Id(data.Id);
< 		servicePlan.AssessmentId(data.AssessmentId);
< 		servicePlan.CaseManagerId(data.CaseManagerId);
< 		servicePlan.CaseManagerName(data.CaseManagerName);
< 		servicePlan.CaseManagerSupervisorId(data.CaseManagerSupervisorId);
< 		servicePlan.CaseManagerSupervisorName(data.CaseManagerSupervisorName);
< 		servicePlan.ClientId(data.ClientId);
< 		servicePlan.ClientName(data.ClientName);
< 		servicePlan.ClientBirth(data.ClientBirth);
< 		servicePlan.MedicaidId(data.MedicaidId);
< 		servicePlan.Type(data.Type);
< 		servicePlan.ReportDate(data.ReportDate.slice(0, 10));
< 		self.ServicePlans.push(servicePlan);
< 	};
< 
< 	this.Assessments = ko.observableArray();
< 	this.AssessmentAdd = function(data) {
< 		assessment = new ParentAssessment();
< 		assessment.Id(data.Id);
< 		assessment.CaseManagerId(data.CaseManagerId);
< 		assessment.CaseManagerName(data.CaseManagerName);
< 		assessment.CaseManagerSupervisorId(data.CaseManagerSupervisorId);
< 		assessment.CaseManagerSupervisorName(data.CaseManagerSupervisorName);
< 		assessment.ClientId(data.ClientId);
< 		assessment.ClientName(data.ClientName);
< 		assessment.ClientBirth(data.ClientBirth);
< 		assessment.MedicaidId(data.MedicaidId);
< 		assessment.Type(data.Type);
< 		assessment.ReportDate(data.ReportDate.slice(0, 10));
< 		self.Assessments.push(assessment);
< 	};
---
> 	this.ObjectiveStatus = [
> 		{ Value: 'new', Label: 'New'},
> 		{ Value: 'ongoing', Label: 'Ongoing'},
> 		{ Value: 'deferred', Label: 'Deferred'},
> 		{ Value: 'achieved', Label: 'Achieved'}
> 	];
> 
> 	// Non-editable catalog data - Comes from the server
> 	this.FunctionalTypes = ko.observableArray();
> 	this.FunctionalTypesAdd = function(data) {
> 		type = new FunctionalType();
> 		type.Id(data.Id);
> 		type.Label(data.Label);
> 		type.Priority(data.Priority);
> 		type.Disabled(data.Disabled);
> 		type.Description(data.Description);
> 		self.FunctionalTypes.push(type);
> 	};
> 
> 	// Non-editable catalog data - Comes from the server
> 	this.AgentsTypes = ko.observableArray();
> 	this.AgentsTypesAdd = function(data) {
> 		type = new AgentType();
> 		type.Id(data.Id);
> 		type.Label(data.Label);
> 		type.Priority(data.Priority);
> 		type.Disabled(data.Disabled);
> 		self.AgentsTypes.push(type);
> 	};
>   
>   // Non-editable catalog data - Comes from the server
> 	this.ActivityTypes = ko.observableArray();
> 	this.ActivityTypesAdd = function(data) {
> 		type = new ActivityType();
> 		type.Value(data.Id);
> 		type.Label(data.Label);
> 		type.Priority(data.Priority);
> 		type.Disabled(data.Disabled);
> 		self.ActivityTypes.push(type);
> 	};
>   
>   // Non-editable catalog data - Comes from the server
> 	this.ContactTypes = ko.observableArray();
> 	this.ContactTypesAdd = function(data) {
> 		type = new ContactType();
> 		type.Value(data.Id);
> 		type.Label(data.Label);
> 		type.Priority(data.Priority);
> 		type.Disabled(data.Disabled);
> 		self.ContactTypes.push(type);
> 	};
>   
>     // Non-editable catalog data - Comes from the server
> 	this.LocationTypes = ko.observableArray();
> 	this.LocationTypesAdd = function(data) {
> 		type = new LocationType();
> 		type.Value(data.Id);
> 		type.Label(data.Label);
> 		type.Priority(data.Priority);
> 		type.Disabled(data.Disabled);
> 		self.LocationTypes.push(type);
> 	};
>   
>   // Non-editable reference data - Comes from the server
> 	this.ServicePlanProblems = ko.observableArray();
> 	this.ServicePlanProblemsAdd = function(data) {
> 		prob = new ServicePlanProblemRecord();
> 		prob.Id(data.Id);
>     prob.ProblemId(data.ProblemId);
> 		prob.Area(data.Area);
> 		prob.Problem(data.Problem);
> 		prob.Activities(data.Activities);
> 
>     data.Goals.forEach(function(goal) {
>       prob.GoalsAdd(goal);
>     });
>     
> 		self.ServicePlanProblems.push(prob);
> 	};
> 	this.ServicePlanProblemsInactive = ko.computed(function() {
> 		return ko.utils.arrayFilter(  // exclude any for which notes already exist
> 			self.ServicePlanProblems(),
> 			function(problem) { 
>         var retval = true;
>         ko.utils.arrayForEach(self.Note.Problems(), function(noteProblem) {
>             if(noteProblem.ProblemId() == problem.Id() && !noteProblem._destroy) {
>               retval = false;
>             }
>         });
>         return retval; 
>       } 
> 		);
> 	});  
>   
> 
> 	this.Note = new Note(this);
> 	this.NoteCreate = function(data) {
> 		note = self.Note;
> 		note.Id(data.Note.id);
>     note.pid(data.Note.pid);
>     // TODO many of these obsolete WKR
> 		note.AssessmentId(data.Note.AssessmentId);
> 		note.Type(data.Note.Type);
> 		note.ClientId(data.Note.ClientId);
>     note.pid(data.Note.pid);
> 		note.ClientName(data.Note.ClientName);
>     if(data.Note.DateWritten !== null)
>       note.DateWritten(data.Note.DateWritten.split(' ')[0]);  // Use only date part
> 		note.DateComplete(data.Note.DateComplete);
> 		note.CaseManagerId(data.Note.CaseManagerId);
> 		note.CaseManagerName(data.Note.CaseManagerName);
> 		note.CaseManagerSupervisorId(data.Note.CaseManagerSupervisorId);
> 		note.CaseManagerSupervisorName(data.Note.CaseManagerSupervisorName);
> 		note.ManagerNote(data.Note.ManagerNote);
> 		note.Finalized.Finalized(data.Note.FinalizedDate);
>     note.TCMServicePlanId(data.Note.TCMServicePlanId);
>     note.TCMServicePlanFinalizedDate(data.Note.TCMServicePlanFinalizedDate);
>     
> 		data.Note.Problems.forEach(function(problem) {
> 			note.ProblemsAdd(problem);
> 		});
>        
>     data.Note.Activities.forEach(function(activity) {
> 			note.ActivitiesAdd(activity);
> 		});
>     
> 	};
> 
> 	this.AjaxUri = function(action) {
> 		 return self.Configuration.AjaxUri
> 			+ '?action=' + action
> 			+ '&id=' + self.Configuration.NoteId;
> 	}
88a161
> 
92c165
< 		var AjaxUri = self.Configuration.AjaxUri + '?action=new';
---
> 		var AjaxUri = self.AjaxUri('new');
98,99c171,174
< 		$.getJSON(AjaxUri,
< 			function(response) {
---
> 		$.ajax({
> 			url: AjaxUri,
> 			dataType: 'json',
> 			success: function(response) {
102,103c177
< 					'data' in response &&
< 					'ServicePlan' in response.data
---
> 					'data' in response
105,113c179,199
< 					self.ServicePlanCreate(response.data.ServicePlan);
< 					if('Assessments' in response.data &&
< 						response.data.Assessments.length > 0
< 					) {
< 						response.data.Assessments.forEach(function(assessment) {
< 							self.AssessmentAdd(assessment);
< 						});
< 					} else {
< 						self.ErrorAlertSet('No Previous Assessments could be located for this Patient.');
---
> 					if('User' in response.data) {
> 						self.User(response.data.User);
> 					}
>           
>           
> 
> /******  This will move to new.phtml, where it needs to fetch from the most recent finalized service plan  WKR110414
>           if('ServicePlan' in response.data) {
>               self.Problems.removeAll();
>           		response.data.ServicePlan.Problems.forEach(function(problem) {
> alert( 'Load(): problem = ' + JSON.stringify( problem));
>                 self.ProblemsAdd(problem); 
>               });
>           }
> ******/
> 
> 					if('FunctionalTypes' in response.data) {
> 						self.FunctionalTypes.removeAll();
> 						response.data.FunctionalTypes.forEach(
> 							function(type) { self.FunctionalTypesAdd(type); }
> 						);
115,119c201,210
< 					if('ServicePlans' in response.data &&
< 						response.data.ServicePlans.length > 0
< 					) {
< 						response.data.ServicePlans.forEach(function(servicePlan) {
< 							self.ServicePlanAdd(servicePlan);
---
> 					if('AgentsTypes' in response.data) {
> 						self.AgentsTypes.removeAll();
> 						response.data.AgentsTypes.forEach(
> 							function(type) { self.AgentsTypesAdd(type); }
> 						);
> 						self.AgentsTypesAdd({
> 							Id: "0",
> 							Label: "Other",
> 							Priority: "100",
> 							Disabled: "0"							
120a212,245
> 					}         
>           if('ActivityTypes' in response.data) {
>             self.ActivityTypes.removeAll();
>             response.data.ActivityTypes.forEach(
>               function(type) { 
>               self.ActivityTypesAdd(type); }
>               );           
>           }
>           
>           if('ContactTypes' in response.data) {
>             self.ContactTypes.removeAll();
>             response.data.ContactTypes.forEach(
>               function(type) { 
>               self.ContactTypesAdd(type); }
>               );           
>           }
>           
>           if('LocationTypes' in response.data) {
>             self.LocationTypes.removeAll();
>             response.data.LocationTypes.forEach(
>               function(type) { 
>               self.LocationTypesAdd(type); }
>               );           
>           }          
>            if('ServicePlanProblems' in response.data) {
>             self.ServicePlanProblems.removeAll();
>             response.data.ServicePlanProblems.forEach(
>               function(prob) { 
>                 self.ServicePlanProblemsAdd(prob); }
>               );           
>           }          
>                  
> 					if('Note' in response.data) {
> 						self.NoteCreate(response.data);
123c248
< 					self.ErrorAlertSet('Initial Data could not be retrieved from the server.');
---
> 					self.ErrorAlertSet('Note could not be retrieved from the server.');
124a250,254
>         note.ActivitiesAddNew();  // Create an initial entry for user to type into
> 				self.ActivityWait(false);
> 			},
> 			error: function() {
> 				self.ErrorAlertSet('Note could not be retrieved from the server.');
127c257
< 		);
---
> 		});
129a260,328
>    this.isNumber = function(n) {
>     return !isNaN(parseFloat(n)) && isFinite(n);
>   };
> 
> // Hackish field validation pending a more robust solution
>   this.errorElements = new Array();
>   this.validateFormData = function () {   
>   
>     var self = this;
>     var valid = true;
>     var totalMins = 0;
>     var index = 0;
>     
>     // Clear any highlighted elements from previous validation before checking current values
>     this.errorElements.forEach( function(elemId)  {
>       elem = document.getElementById(elemId);
>       elem.style.borderColor = 'transparent';
>     });
>     this.errorElements = new Array();
>     
>     ko.utils.arrayForEach(self.Note.Activities(), function(activity) {
>       if(!activity._destroy) {
>         totalMins += activity.DurationMins();
> 
>         if(!self.isNumber(activity.ActivityTypeId())) {
>           self.ErrorAlertSet('Activity Type is required.');
>           elem = document.getElementById('AT' + index);
>           
>           if(elem !== undefined) {
>             self.errorElements.push('AT' + index);
>             elem.style.borderColor = 'tomato';
>             elem.style.borderWidth = '2px';
>           }
>           valid = false;
>         }
>         if(!self.isNumber(activity.LocationTypeId())) {
>           self.ErrorAlertSet('Location Type is required.');
>          elem = document.getElementById('LT' + index);
>           if(elem !== undefined) {
>             self.errorElements.push('LT' + index);
>             elem.style.borderColor = 'tomato';
>             elem.style.borderWidth = '2px';
>           }
>           valid = false;
>         }   
>         if(!self.isNumber(activity.ContactTypeId())) {
>           self.ErrorAlertSet('Contact Type is required.');
>          elem = document.getElementById('CT' + index);
>           if(elem !== undefined) {
>             self.errorElements.push('CT' + index);
>             elem.style.borderColor = 'tomato';
>             elem.style.borderWidth = '2px';
>           }
>           valid = false;
>         }              
>       }
>       index++;
>     });
>   
>     if(!valid)
>       return false;
>     
>     if(totalMins < 8) {
>       self.ErrorAlertSet('At least one unit (8 minutes) of activities must be present.');
>       return false;
>     }
>     return true;
>   }
>   
133,141c332,388
< 		data = ko.toJS(self.ServicePlan);
< 
< 		if(data.ServicePlan !== undefined) {
< 			data.Assessment = data.ServicePlan.AssessmentId;
< 			data.ServicePlan = data.ServicePlan.Id;
< 		} else if(data.Assessment !== undefined) {
< 			data.Assessment = data.Assessment.Id;
< 		}
< 
---
> 		viewModel = self.Note.ViewModel;
> 		delete self.Note.ViewModel;
> 		finalized = self.Note.Finalized;
> 		delete self.Note.Finalized;
> 
> 		data = ko.toJS(self.Note);
> 
> 		self.Note.ViewModel = viewModel;
> 		self.Note.Finalized = finalized;
> 
> 		delete data.dateOffset;
> 		delete data.dateString;
> 		delete data.dateTimeString;
> 
> 		delete data.DiagnosisActive;
> 		delete data.DiagnosisAdd;
> 		delete data.DiagnosisAddNew;
> 		delete data.DiagnosisRemove;
> 
> 		delete data.ManagerNoteVisible;
> 		delete data.ManagerNoteVisibleToggle;
> 
> 		delete data.ProblemsAdd;
> 		delete data.ProblemsAddNew;
> 		delete data.ProblemsRemove;
> 		delete data.ProblemsSelected;
> 
> 		delete data.TypeDisplay;
> 
> 		data.Problems.forEach(function(problem) {
> 			problem.Agents.forEach(function(agent) {
> 				delete agent.TypeToggle;
> 			});
> 			delete problem.AgentsActive;
> 			delete problem.AgentsAdd;
> 			delete problem.AgentsAddNew;
> 			delete problem.AgentsRemove;
> 
> 			problem.Goals.forEach(function(goal) {
> 				delete goal.ObjectivesAdd;
> 				delete goal.ObjectivesAddNew;
> 				delete goal.ObjectivesRemove;
> 			});
> 			delete problem.GoalsAdd;
> 			delete problem.GoalsAddNew;
> 			delete problem.GoalsRemove;
>       delete problem.Goals;
>       delete problem.Agents;
> 			delete problem.Type;
>       delete problem.Diagnosis;
>       delete problem.Area;
>       delete problem.Problem;
>       delete problem.Activities;
>      
> 		});
>     
> 		self.ActivityWait(false);
146,160c393,399
< 		if(self.ServicePlan.Type() === undefined) {
< 			self.ErrorAlertSet('Service Plan Type must be selected.');
< 		} else if(self.ServicePlan.Type() === 'INITIAL' &&
< 			self.ServicePlan.Assessment() === undefined
< 		) {
< 			self.ErrorAlertSet('Assessment must be selected.');
< 		} else if(self.ServicePlan.Type() === 'UPDATE' &&
< 			self.ServicePlan.Assessment() === undefined &&
< 			self.ServicePlan.ServicePlan() === undefined
< 		) {
< 			self.ErrorAlertSet('Assessment or Service Plan must be selected.');
< 		} else {
< 			self.ErrorAlertSet();
< 			var AjaxUri = self.Configuration.AjaxUri
< 				+ '?action=create';
---
> 		if(self.Note.Finalized.Finalized() == null) {
>     
>       if( !self.validateFormData()) {
>         return;
>       }
>     
> 			var AjaxUri = self.AjaxUri('create');
164,166c403
< 
< 			servicePlanJson = ko.toJSON(self.ConvertForSave());
< 
---
> 			noteJson = ko.toJSON(self.ConvertForSave());
170c407
< 				servicePlanJson,
---
> 				noteJson,
172,175c409,418
< 					response = ko.utils.parseJson(response);
< 					if('status' in response && response.status === 'success') {
< 						if('record' in response.data && response.data.record > 0) {
< 							window.location.replace(self.Configuration.WebRoot + '/interface/patient_file/encounter/view_form.php?formname=TCMServicePlan&id=' + response.data.record);
---
> 					try {
> 						response = ko.utils.parseJson(response);
> 					} catch(err) {
> 						self.ErrorAlertSet('Service Plan could not be saved, server error.');
> 					}
> 					if(typeof response === 'object') {
> 						if('status' in response && response.status === 'success') {
> 							self.Exit();
> 						} else if ('message' in response) {
> 							self.ErrorAlertSet('Service Plan could not be saved: ' + response.message);
177c420,446
< 							self.ErrorAlertSet('The response, after creating the Service Plan, was missing crutial data.');
---
> 							self.ErrorAlertSet('Service Plan could not be saved.');
> 						}
> 					}
> 					self.ActivityWait(false);
> 				}
> 			);
> 		} else {
> 			self.ErrorAlertSet('Service Plan can not be saved, document finalized.');
> 		}
> 	};
> 
> 	this.Finalize = function() {
> 		if(self.Note.Finalized.Finalized() == null) {
> 			var AjaxUri = self.AjaxUri('finalize');
> 
> 			self.ActivityWait('Finalizing Document . . .');
> 			$.ajax({
> 				url: AjaxUri,
> 				dataType: 'json',
> 				success: function(response) {
> 					if('status' in response && response.status === 'success') {
> 						if('finalized' in response.data) {
> 							if(self.Note.CaseManagerId() === response.data.finalized.CaseManagerId
> 								&& self.Note.CaseManagerSupervisorId() === response.data.finalized.CaseManagerSupervisorId
> 							) {
> 								self.Note.Finalized.Finalized(response.data.finalized.FinalizedDate);
> 							}
180c449
< 						self.ErrorAlertSet('Service Plan could not be created: ' + response.message);
---
> 						self.ErrorAlertSet('Service Plan could not be finalized: ' + response.message);
182c451
< 						self.ErrorAlertSet('Service Plan could not be created.');
---
> 						self.ErrorAlertSet('Service Plan could not be finalized.');
184a454,457
> 				},
> 				error: function() {
> 					self.ErrorAlertSet('Service Plan could not be finalized, server error.');
> 					self.ActivityWait(false);
186c459,494
< 			);
---
> 			});
> 		} else {
> 			self.ErrorAlertSet('Service Plan can not be finalized, already finalized.');
> 		}
> 	}
> 	this.Unfinalize = function() {
> 		if(self.Note.Finalized.Finalized() != null) {
> 			var AjaxUri = self.AjaxUri('unfinalize');
> 			self.ActivityWait('Unfinalizing Document . . .');
> 
> 			$.ajax({
> 				url: AjaxUri,
> 				dataType: 'json',
> 				success: function(response) {
> 					if('status' in response && response.status === 'success') {
> 						if('finalized' in response.data) {
> 							if(self.Note.CaseManagerId() === response.data.finalized.CaseManagerId
> 								&& self.Note.CaseManagerSupervisorId() === response.data.finalized.CaseManagerSupervisorId
> 							) {
> 								self.Note.Finalized.Finalized(response.data.finalized.FinalizedDate);
> 							}
> 						}
> 					} else if ('message' in response) {
> 						self.ErrorAlertSet('Service Plan could not be unfinalized: ' + response.message);
> 					} else {
> 						self.ErrorAlertSet('Service Plan could not be unfinalized.');
> 					}
> 					self.ActivityWait(false);
> 				},
> 				error: function() {
> 					self.ErrorAlertSet('Service Plan could not be unfinalized, server error.');
> 					self.ActivityWait(false);
> 				}
> 			});
> 		} else {
> 			self.ErrorAlertSet('Service Plan can not be unfinalized, not finalized.');
190,193c498,503
< 	this.Cancel = function() {
< 		if('restoreSession' in top)
< 			top.restoreSession();
< 		window.location.replace(self.Configuration.ExitUri);
---
> 	this.Exit = function() {
> 		document.location.href = self.Configuration.ExitUri;
> 	};
> 
> 	this.Print = function() {
> 		window.print();
194a505
>  
